This is abnfgen, an ABNF-grammar based test case generator.

ABNF -- Advanced Backus Naur Form -- is a grammar format used in
many protocol specifications.  It is described in RFCs 5234 and 7405.
ABNF looks like this:
	
	coin = "heads" / "tails"    ; one of two outcomes

Given an ABNF grammar, abnfgen generates files in a subdirectory.
Each file is a (different) random document that complies with
the grammar.

Uses:
  o With -l, checking an ABNF grammar for syntactical correctness.

  o Generating sample documents that illustrate a grammar -
    "Is this what you meant?"

  o Generating test cases for tools that are supposed
    to parse the grammar.

For updates, see <http://www.quut.com/abnfgen>.


*** Notes:

- Changed to use srand48, do not set srand in every file, better rand
  distribution
- It is best to use ranges if possible, faster and simpler.
- You need to add cardinality when using alternation when you want to
  have even distribution, example
	"HEXDIG	=  {10}( DIGIT ) / {6}( %41-46 ) ; 0-9A-F\n"
  Otherwise values are distributed:
  0-9 1/2*1/10=1/20 each and A-F 1/2*1/6=1/12
- If you limit recursion (-y flag), you can skew
  distribution. Recursion should be more than any alternation list.
